<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XiaoSe&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xiaosee.top/"/>
  <updated>2017-03-10T01:21:15.878Z</updated>
  <id>http://xiaosee.top/</id>
  
  <author>
    <name>XiaoSe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android 蓝牙配对连接详细指导</title>
    <link href="http://xiaosee.top/2017/03/09/Android-%E8%93%9D%E7%89%99%E9%85%8D%E5%AF%B9%E8%BF%9E%E6%8E%A5%E8%AF%A6%E7%BB%86%E6%8C%87%E5%AF%BC/"/>
    <id>http://xiaosee.top/2017/03/09/Android-蓝牙配对连接详细指导/</id>
    <published>2017-03-09T08:10:53.000Z</published>
    <updated>2017-03-10T01:21:15.878Z</updated>
    
    <content type="html"><![CDATA[<p>公司的项目中需要连接一个蓝牙耳机的功能。Android 并没有开放配对连接耳机的接口，而且网上大部分资料都是讲解如何连接蓝牙4.0的，很少有资料详细介绍蓝牙2.0相关的。自己先是花了一些时间看系统的蓝牙设置代码，期间还是踩了不少坑才摸索出解决办法。所有把我自己摸索总结出来的经验梳理记录下，以便备份。<br><a id="more"></a></p>
<h3 id="本文适用的范围"><a href="#本文适用的范围" class="headerlink" title="本文适用的范围"></a>本文适用的范围</h3><p>Android蓝牙部分是很复杂的，也涉及很多名词和功能。本文介绍的配对连接方法适用于一般的蓝牙耳机、音响等，并不是连接蓝牙 BLE 或者想用蓝牙来进行 Socket 通信的。</p>
<p>先来介绍几种名称：</p>
<ol>
<li>Profile：<blockquote>
<p>Bluetooth 的一个很重要特性，就是所有的 Bluetooth 产品都无须实现全部的 Bluetooth 规范。为了更容易的保持 Bluetooth 设备之间的兼容，Bluetooth 规范中定义了 Profile。Profile 定义了设备如何实现一种连接或者应用，你可以把 Profile 理解为连接层或者应用层协。我们标题中的说的连接其实就是去连接各种 Profile。下面介绍的几种都是Android 实现了的 Profile。</p>
</blockquote>
</li>
<li>A2dp：<blockquote>
<p>表示蓝牙立体声，和蓝牙耳机听歌有关那些，另还有个<code>Avrcp</code>音频/视频远程控制配置文件，是用来听歌时暂停，上下歌曲选择的。</p>
</blockquote>
</li>
<li>Handset、Handfree：<blockquote>
<p>和电话相关，蓝牙接听、挂断电话。</p>
</blockquote>
</li>
<li>其他：<blockquote>
<p><code>btservice</code>关于蓝牙基本操作的目录，一切由此开始； <code>hdp</code>蓝牙关于医疗方面的应用；<code>hid</code>：人机交互接口，蓝牙鼠标键盘什么的就是这个了 ；<code>pbap</code>：电话号码簿访问协议(Phonebook Access Profile) …</p>
</blockquote>
</li>
</ol>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ol>
<li><p>在 AndroidManifest.xml 添加所需的权限</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.BLUETOOTH"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.BLUETOOTH_ADMIN"</span> /&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>打开蓝牙</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();</div><div class="line"><span class="keyword">if</span> (!mBluetoothAdapter.isEnabled()) &#123;</div><div class="line">   Intent enableIntent = <span class="keyword">new</span> Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);</div><div class="line">   startActivityForResult(enableIntent, REQUEST_ENABLE_BT);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>注册广播</p>
<p>由于蓝牙的搜索、配对和连接状态的改变都是系统通过广播的方式发出来的，所以需要注册这些广播来获取状态的改变。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">IntentFilter intentFilter = <span class="keyword">new</span> IntentFilter();</div><div class="line">intentFilter.addAction(BluetoothDevice.ACTION_FOUND);</div><div class="line">intentFilter.addAction(BluetoothAdapter.ACTION_DISCOVERY_FINISHED);</div><div class="line">intentFilter.addAction(BluetoothDevice.ACTION_BOND_STATE_CHANGED);</div><div class="line">intentFilter.addAction(BluetoothA2dp.ACTION_CONNECTION_STATE_CHANGED);</div><div class="line">intentFilter.addAction(BluetoothHeadset.ACTION_CONNECTION_STATE_CHANGED);</div><div class="line">registerReceiver(mReceiver, intentFilter);</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><ol>
<li><p>获取已配对的设备。对于之前已经配对成功的设备，系统会把它的信息存储在本地。再去调用搜索的时候，系统是不会重新再次发现这个设备的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Set&lt;BluetoothDevice&gt; pairedDevices = mBluetoothAdapter.getBondedDevices();</div></pre></td></tr></table></figure>
</li>
<li><p>搜索设备</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mBluetoothAdapter.startDiscovery();</div></pre></td></tr></table></figure>
<p>系统发现新的蓝牙设备了之后，会通过广播把这个设备的信息发送出来。所以我们要通过截获 Action 为<code>BluetoothDevice.ACTION_FOUND</code>的 Intent，并得到设备信息。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="配对"><a href="#配对" class="headerlink" title="配对"></a>配对</h3><p>重点来来了，做了一系列准备工作，拿到了<code>BluetoothDevice</code>下面就要开始配对连接了。但是坑的地方也在这里，首先蓝牙设备必须要先配对成功了再去连接各个不同的 Profile，如果直接去连接有的机型确实也可以连上，但是大部分的都没反应。然后就是 Android 4.4 API 19 以上才开放配对接口，对于之前的系统我们只能通过反射的方式去获取接口。</p>
<ol>
<li><p>配对</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class="line">    <span class="comment">//Android 4.4 API 19 以上才开放Bond接口</span></div><div class="line">    device.createBond();</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">//API 19 以下用反射调用Bond接口</span></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        device.getClass().getMethod(<span class="string">"connect"</span>).invoke(device);</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>配对成功会发送广播<code>BluetoothDevice.ACTION_BOND_STATE_CHANGED</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设备绑定状态改变</span></div><div class="line">BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);</div><div class="line"><span class="keyword">int</span> bondState = intent.getIntExtra(BluetoothDevice.EXTRA_BOND_STATE, BluetoothDevice.ERROR);</div><div class="line"><span class="comment">//收到绑定成功的通知后自动连接</span></div><div class="line"><span class="keyword">if</span> (item != <span class="keyword">null</span> &amp;&amp; bondState == BluetoothDevice.BOND_BONDED) &#123;</div><div class="line">    connectDevice(item);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>配对的几种状态</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BOND_NONE = <span class="number">10</span>;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BOND_BONDING = <span class="number">11</span>;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BOND_BONDED = <span class="number">12</span>;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><p>配对（绑定）和连接是两个不同的过程，配对是指两个设备发现了对方的存在，可以获取到对方的名称、地址等信息，有能力建立起连接。连接是指两个设备共享了一个 RFCOMM 通道，有能力进行数据互传。确认绑定上了之后，才能开始连接，连接其实就是连接这个蓝牙设备支持的 Profile 。</p>
<p>可以观察一下设置里面蓝牙连接的过程过程，就是先开始配对，配对成功后才开始连接所有支持的 Profile。这一步也是比较坑的地方，网上都没有详细的对这一块说明。我也是在 Setting 的源码里面翻了半天才找到这块的逻辑。但是系统应用可以直接调用连接的方法，却不外开放…</p>
<ol>
<li><p>首先我们要提前获取 Profile，这里拿A2dp来举例，其他的原理是一样的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">mBluetoothAdapter.getProfileProxy(<span class="keyword">this</span>, <span class="keyword">new</span> BluetoothProfile.ServiceListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(<span class="keyword">int</span> profile, BluetoothProfile proxy)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mA2dpService == <span class="keyword">null</span>) &#123;</div><div class="line">            mA2dpService = (BluetoothA2dp) proxy;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(<span class="keyword">int</span> profile)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;, BluetoothProfile.A2DP);</div></pre></td></tr></table></figure>
</li>
<li><p>当我们收到配对成功的广播或者确定设备已经配对成功后，我们就要调用 Profile 的<code>connect</code>方法来连接。但是这个方法被 Google 给<code>@hide</code>了。像上面一样用反射…</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    mA2dpService.getClass().getMethod(<span class="string">"connect"</span>, BluetoothDevice.class)</div><div class="line">            .invoke(mA2dpService, item.getDevice());</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>连接成功系统会发送广播<code>BluetoothA2dp.ACTION_CONNECTION_STATE_CHANGED</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);</div><div class="line"><span class="keyword">int</span> profileState = intent.getIntExtra(BluetoothProfile.EXTRA_STATE, BluetoothProfile.STATE_DISCONNECTED);</div></pre></td></tr></table></figure>
</li>
<li><p>连接的几种状态</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** The profile is in disconnected state */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATE_DISCONNECTED  = <span class="number">0</span>;</div><div class="line"><span class="comment">/** The profile is in connecting state */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATE_CONNECTING    = <span class="number">1</span>;</div><div class="line"><span class="comment">/** The profile is in connected state */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATE_CONNECTED     = <span class="number">2</span>;</div><div class="line"><span class="comment">/** The profile is in disconnecting state */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATE_DISCONNECTING = <span class="number">3</span>;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="坑坑坑"><a href="#坑坑坑" class="headerlink" title="坑坑坑"></a>坑坑坑</h3><p>哈哈，你以为连接上了就完事了吗？！这里面还有几个坑容我给你说说。</p>
<ol>
<li><p>不要忘记关闭 Profile。我们为了连接不是获取了 Profile 吗，在连接完成之后一定要关闭掉他，一直不关闭的话会报错。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mBluetoothAdapter.closeProfileProxy(BluetoothProfile.A2DP, mA2dpService);</div><div class="line">mA2dpService = <span class="keyword">null</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>蓝牙连接成功了之后系统会通知手机状态发生了改变，就像切换了横竖屏一样，需要重新调用这个 Activity 的生命周期。当时我发现只要我一连接成功，我的界面就闪一下回到初始状态。就纳闷了半天，然后我一直以为是用反射连接导致程序异常重启了…几经摸索我发现是没有设置<code>android:configChanges</code>的缘故。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:configChanges="keyboard|keyboardHidden|navigation"</div></pre></td></tr></table></figure>
<p>其实前面两个属性我也早想到了，唯独最后一个，在官方文档里面写的<code>This should never normally happen.</code>我天真的相信了，一直没试它。最后实在没办法了把所有的属性都写上去，然后一个个减，最终发现了这三少一个都不行。</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>值</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>“keyboard”</td>
<td style="text-align:left">键盘类型发生了变化 — 例如，用户插入了一个外置键盘。</td>
</tr>
<tr>
<td>“keyboardHidden”</td>
<td style="text-align:left">键盘无障碍功能发生了变化 — 例如，用户显示了硬件键盘。</td>
</tr>
<tr>
<td>“navigation”</td>
<td style="text-align:left">导航类型（轨迹球/方向键）发生了变化。（这种情况通常永远不会发生。）</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司的项目中需要连接一个蓝牙耳机的功能。Android 并没有开放配对连接耳机的接口，而且网上大部分资料都是讲解如何连接蓝牙4.0的，很少有资料详细介绍蓝牙2.0相关的。自己先是花了一些时间看系统的蓝牙设置代码，期间还是踩了不少坑才摸索出解决办法。所有把我自己摸索总结出来的经验梳理记录下，以便备份。&lt;br&gt;
    
    </summary>
    
    
      <category term="Android 蓝牙 配对 连接" scheme="http://xiaosee.top/tags/Android-%E8%93%9D%E7%89%99-%E9%85%8D%E5%AF%B9-%E8%BF%9E%E6%8E%A5/"/>
    
  </entry>
  
  <entry>
    <title>Java int 转 String</title>
    <link href="http://xiaosee.top/2017/03/08/Java-int-%E8%BD%AC-String/"/>
    <id>http://xiaosee.top/2017/03/08/Java-int-转-String/</id>
    <published>2017-03-08T09:39:41.000Z</published>
    <updated>2017-03-09T03:21:23.567Z</updated>
    
    <content type="html"><![CDATA[<h3 id="int-gt-String"><a href="#int-gt-String" class="headerlink" title="int -&gt; String"></a>int -&gt; String</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> i = <span class="number">12345</span>;</div><div class="line">String s = <span class="string">""</span>;</div></pre></td></tr></table></figure>
<ol>
<li><p>第一种方法：<code>s = i + &quot;&quot;;</code></p>
</li>
<li><p>第二种方法：<code>s = String.valueOf(i);</code></p>
</li>
</ol>
<blockquote>
<p>第一种方法：<code>s = i + &quot;&quot;;</code> 会产生两个 String 对象。<br>第二种方法：<code>s = String.valueOf(i);</code> 直接使用 String 类的静态方法，只产生一个对象。</p>
</blockquote>
<a id="more"></a>
<h3 id="String-gt-int"><a href="#String-gt-int" class="headerlink" title="String -&gt; int"></a>String -&gt; int</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">"12345"</span>;</div><div class="line"><span class="keyword">int</span> i;</div></pre></td></tr></table></figure>
<ol>
<li><p>第一种方法：<code>i = Integer.parseInt(s);</code></p>
</li>
<li><p>第二种方法：<code>i = Integer.valueOf(s).intValue();</code></p>
</li>
</ol>
<blockquote>
<p>第一种方法：<code>i = Integer.parseInt(s);</code>直接使用静态方法，不会产生多余的对象，但会抛出异常。<br>第二种方法：<code>i = Integer.valueOf(s).intValue();</code>，<code>Integer.valueOf(s)</code> 相当于 <code>new Integer(Integer.parseInt(s))</code>，也会抛异常，但会多产生一个对象。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;int-gt-String&quot;&gt;&lt;a href=&quot;#int-gt-String&quot; class=&quot;headerlink&quot; title=&quot;int -&amp;gt; String&quot;&gt;&lt;/a&gt;int -&amp;gt; String&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;12345&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;String s = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;第一种方法：&lt;code&gt;s = i + &amp;quot;&amp;quot;;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第二种方法：&lt;code&gt;s = String.valueOf(i);&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;第一种方法：&lt;code&gt;s = i + &amp;quot;&amp;quot;;&lt;/code&gt; 会产生两个 String 对象。&lt;br&gt;第二种方法：&lt;code&gt;s = String.valueOf(i);&lt;/code&gt; 直接使用 String 类的静态方法，只产生一个对象。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Java int String" scheme="http://xiaosee.top/tags/Java-int-String/"/>
    
  </entry>
  
  <entry>
    <title>博客维护方法</title>
    <link href="http://xiaosee.top/2017/03/08/%E5%8D%9A%E5%AE%A2%E7%BB%B4%E6%8A%A4%E6%96%B9%E6%B3%95/"/>
    <id>http://xiaosee.top/2017/03/08/博客维护方法/</id>
    <published>2017-03-08T08:10:23.000Z</published>
    <updated>2017-03-09T05:59:21.036Z</updated>
    
    <content type="html"><![CDATA[<p>博客搭建好了，记录下维护方法。免得以后忘记了。<br><a id="more"></a></p>
<h3 id="新建博客"><a href="#新建博客" class="headerlink" title="新建博客"></a>新建博客</h3><ol>
<li><p>在博客的根目录下执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new &quot;postName&quot; #新建文章</div></pre></td></tr></table></figure>
</li>
<li><p>在<code>\source\_posts\</code>目录下会形成一个<code>.md</code>文件，这个 md 文件就是博客的内容。用<a href="https://www.zybuluo.com/" target="_blank" rel="external">作业部落</a>方便在线编辑。</p>
</li>
<li>运行<code>deploy.sh</code>发布博客到 GitHub。</li>
</ol>
<h3 id="重新配置环境"><a href="#重新配置环境" class="headerlink" title="重新配置环境"></a>重新配置环境</h3><ol>
<li><p>安装Node.js：<a href="https://nodejs.org/" target="_blank" rel="external">下载</a></p>
</li>
<li><p>安装Git：<a href="https://git-scm.com/" target="_blank" rel="external">下载</a></p>
</li>
<li><p>安装Hexo：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-cli -g</div></pre></td></tr></table></figure>
<p>如果要重新建站则输入下面命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo init &lt;folder&gt;</div><div class="line">$ cd &lt;folder&gt;</div><div class="line">$ npm install</div></pre></td></tr></table></figure>
<p>常用命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ hexo new &quot;postName&quot; #新建文章</div><div class="line">$ hexo new page &quot;pageName&quot; #新建页面</div><div class="line"></div><div class="line">$ hexo n == hexo new</div><div class="line">$ hexo g == hexo generate</div><div class="line">$ hexo s == hexo server</div><div class="line">$ hexo d == hexo deploy</div><div class="line"></div><div class="line">$ hexo d -g #生成部署</div><div class="line">$ hexo s -g #生成预览</div></pre></td></tr></table></figure>
</li>
<li><p>同步Hexo建站的配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone git@github.com:XiaoSeee/XiaoSeee.GitHub.io.git -b hexo-config SeeeBlog</div></pre></td></tr></table></figure>
</li>
<li><p>同步GitHub仓库到本地</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone git@github.com:XiaoSeee/XiaoSeee.GitHub.io.git .deploy/XiaoSeee.GitHub.io.git</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://linghucong.js.org/2016/04/15/2016-04-15-hexo-github-pages-blog/" target="_blank" rel="external">手把手教你使用Hexo + Github Pages搭建个人独立博客</a><br><a href="https://github.com/pinggod/hexo-theme-apollo/blob/master/doc/doc-zh.md" target="_blank" rel="external">Apollo 主题的说明文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;博客搭建好了，记录下维护方法。免得以后忘记了。&lt;br&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://xiaosee.top/tags/hexo/"/>
    
  </entry>
  
</feed>
